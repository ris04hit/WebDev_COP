# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.id_account_id import IdAccountId  # noqa: F401,E501
from swagger_server.models.id_comment_id import IdCommentId  # noqa: F401,E501
from swagger_server.models.id_institution_id import IdInstitutionId  # noqa: F401,E501
from swagger_server.models.id_post_id import IdPostId  # noqa: F401,E501
from swagger_server.models.id_tag_id import IdTagId  # noqa: F401,E501
from swagger_server import util


class Account(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: IdAccountId=None, username: str=None, creation_time: datetime=None, name: str=None, institutes: List[IdInstitutionId]=None, posts: List[IdPostId]=None, last_visit: datetime=None, upvotes: int=None, profile_photo: str=None, bookmarks: List[IdPostId]=None, comments: List[IdCommentId]=None, tag_list: List[IdTagId]=None, country: str=None, website_address: str=None, github_handle: str=None, organisation: str=None, followers_num: int=None, following_num: int=None, report_num: int=None, email: str=None):  # noqa: E501
        """Account - a model defined in Swagger

        :param id: The id of this Account.  # noqa: E501
        :type id: IdAccountId
        :param username: The username of this Account.  # noqa: E501
        :type username: str
        :param creation_time: The creation_time of this Account.  # noqa: E501
        :type creation_time: datetime
        :param name: The name of this Account.  # noqa: E501
        :type name: str
        :param institutes: The institutes of this Account.  # noqa: E501
        :type institutes: List[IdInstitutionId]
        :param posts: The posts of this Account.  # noqa: E501
        :type posts: List[IdPostId]
        :param last_visit: The last_visit of this Account.  # noqa: E501
        :type last_visit: datetime
        :param upvotes: The upvotes of this Account.  # noqa: E501
        :type upvotes: int
        :param profile_photo: The profile_photo of this Account.  # noqa: E501
        :type profile_photo: str
        :param bookmarks: The bookmarks of this Account.  # noqa: E501
        :type bookmarks: List[IdPostId]
        :param comments: The comments of this Account.  # noqa: E501
        :type comments: List[IdCommentId]
        :param tag_list: The tag_list of this Account.  # noqa: E501
        :type tag_list: List[IdTagId]
        :param country: The country of this Account.  # noqa: E501
        :type country: str
        :param website_address: The website_address of this Account.  # noqa: E501
        :type website_address: str
        :param github_handle: The github_handle of this Account.  # noqa: E501
        :type github_handle: str
        :param organisation: The organisation of this Account.  # noqa: E501
        :type organisation: str
        :param followers_num: The followers_num of this Account.  # noqa: E501
        :type followers_num: int
        :param following_num: The following_num of this Account.  # noqa: E501
        :type following_num: int
        :param report_num: The report_num of this Account.  # noqa: E501
        :type report_num: int
        :param email: The email of this Account.  # noqa: E501
        :type email: str
        """
        self.swagger_types = {
            'id': IdAccountId,
            'username': str,
            'creation_time': datetime,
            'name': str,
            'institutes': List[IdInstitutionId],
            'posts': List[IdPostId],
            'last_visit': datetime,
            'upvotes': int,
            'profile_photo': str,
            'bookmarks': List[IdPostId],
            'comments': List[IdCommentId],
            'tag_list': List[IdTagId],
            'country': str,
            'website_address': str,
            'github_handle': str,
            'organisation': str,
            'followers_num': int,
            'following_num': int,
            'report_num': int,
            'email': str
        }

        self.attribute_map = {
            'id': 'Id',
            'username': 'Username',
            'creation_time': 'Creation_time',
            'name': 'Name',
            'institutes': 'Institutes',
            'posts': 'Posts',
            'last_visit': 'Last_visit',
            'upvotes': 'Upvotes',
            'profile_photo': 'Profile_photo',
            'bookmarks': 'Bookmarks',
            'comments': 'Comments',
            'tag_list': 'tag_list',
            'country': 'Country',
            'website_address': 'Website_address',
            'github_handle': 'Github_handle',
            'organisation': 'Organisation',
            'followers_num': 'Followers_num',
            'following_num': 'Following_num',
            'report_num': 'Report_num',
            'email': 'Email'
        }
        self._id = id
        self._username = username
        self._creation_time = creation_time
        self._name = name
        self._institutes = institutes
        self._posts = posts
        self._last_visit = last_visit
        self._upvotes = upvotes
        self._profile_photo = profile_photo
        self._bookmarks = bookmarks
        self._comments = comments
        self._tag_list = tag_list
        self._country = country
        self._website_address = website_address
        self._github_handle = github_handle
        self._organisation = organisation
        self._followers_num = followers_num
        self._following_num = following_num
        self._report_num = report_num
        self._email = email

    @classmethod
    def from_dict(cls, dikt) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Account of this Account.  # noqa: E501
        :rtype: Account
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> IdAccountId:
        """Gets the id of this Account.


        :return: The id of this Account.
        :rtype: IdAccountId
        """
        return self._id

    @id.setter
    def id(self, id: IdAccountId):
        """Sets the id of this Account.


        :param id: The id of this Account.
        :type id: IdAccountId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def username(self) -> str:
        """Gets the username of this Account.


        :return: The username of this Account.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this Account.


        :param username: The username of this Account.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def creation_time(self) -> datetime:
        """Gets the creation_time of this Account.


        :return: The creation_time of this Account.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time: datetime):
        """Sets the creation_time of this Account.


        :param creation_time: The creation_time of this Account.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")  # noqa: E501

        self._creation_time = creation_time

    @property
    def name(self) -> str:
        """Gets the name of this Account.


        :return: The name of this Account.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Account.


        :param name: The name of this Account.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def institutes(self) -> List[IdInstitutionId]:
        """Gets the institutes of this Account.


        :return: The institutes of this Account.
        :rtype: List[IdInstitutionId]
        """
        return self._institutes

    @institutes.setter
    def institutes(self, institutes: List[IdInstitutionId]):
        """Sets the institutes of this Account.


        :param institutes: The institutes of this Account.
        :type institutes: List[IdInstitutionId]
        """

        self._institutes = institutes

    @property
    def posts(self) -> List[IdPostId]:
        """Gets the posts of this Account.


        :return: The posts of this Account.
        :rtype: List[IdPostId]
        """
        return self._posts

    @posts.setter
    def posts(self, posts: List[IdPostId]):
        """Sets the posts of this Account.


        :param posts: The posts of this Account.
        :type posts: List[IdPostId]
        """

        self._posts = posts

    @property
    def last_visit(self) -> datetime:
        """Gets the last_visit of this Account.


        :return: The last_visit of this Account.
        :rtype: datetime
        """
        return self._last_visit

    @last_visit.setter
    def last_visit(self, last_visit: datetime):
        """Sets the last_visit of this Account.


        :param last_visit: The last_visit of this Account.
        :type last_visit: datetime
        """
        if last_visit is None:
            raise ValueError("Invalid value for `last_visit`, must not be `None`")  # noqa: E501

        self._last_visit = last_visit

    @property
    def upvotes(self) -> int:
        """Gets the upvotes of this Account.


        :return: The upvotes of this Account.
        :rtype: int
        """
        return self._upvotes

    @upvotes.setter
    def upvotes(self, upvotes: int):
        """Sets the upvotes of this Account.


        :param upvotes: The upvotes of this Account.
        :type upvotes: int
        """
        if upvotes is None:
            raise ValueError("Invalid value for `upvotes`, must not be `None`")  # noqa: E501

        self._upvotes = upvotes

    @property
    def profile_photo(self) -> str:
        """Gets the profile_photo of this Account.


        :return: The profile_photo of this Account.
        :rtype: str
        """
        return self._profile_photo

    @profile_photo.setter
    def profile_photo(self, profile_photo: str):
        """Sets the profile_photo of this Account.


        :param profile_photo: The profile_photo of this Account.
        :type profile_photo: str
        """

        self._profile_photo = profile_photo

    @property
    def bookmarks(self) -> List[IdPostId]:
        """Gets the bookmarks of this Account.


        :return: The bookmarks of this Account.
        :rtype: List[IdPostId]
        """
        return self._bookmarks

    @bookmarks.setter
    def bookmarks(self, bookmarks: List[IdPostId]):
        """Sets the bookmarks of this Account.


        :param bookmarks: The bookmarks of this Account.
        :type bookmarks: List[IdPostId]
        """

        self._bookmarks = bookmarks

    @property
    def comments(self) -> List[IdCommentId]:
        """Gets the comments of this Account.


        :return: The comments of this Account.
        :rtype: List[IdCommentId]
        """
        return self._comments

    @comments.setter
    def comments(self, comments: List[IdCommentId]):
        """Sets the comments of this Account.


        :param comments: The comments of this Account.
        :type comments: List[IdCommentId]
        """

        self._comments = comments

    @property
    def tag_list(self) -> List[IdTagId]:
        """Gets the tag_list of this Account.


        :return: The tag_list of this Account.
        :rtype: List[IdTagId]
        """
        return self._tag_list

    @tag_list.setter
    def tag_list(self, tag_list: List[IdTagId]):
        """Sets the tag_list of this Account.


        :param tag_list: The tag_list of this Account.
        :type tag_list: List[IdTagId]
        """

        self._tag_list = tag_list

    @property
    def country(self) -> str:
        """Gets the country of this Account.


        :return: The country of this Account.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this Account.


        :param country: The country of this Account.
        :type country: str
        """

        self._country = country

    @property
    def website_address(self) -> str:
        """Gets the website_address of this Account.


        :return: The website_address of this Account.
        :rtype: str
        """
        return self._website_address

    @website_address.setter
    def website_address(self, website_address: str):
        """Sets the website_address of this Account.


        :param website_address: The website_address of this Account.
        :type website_address: str
        """

        self._website_address = website_address

    @property
    def github_handle(self) -> str:
        """Gets the github_handle of this Account.


        :return: The github_handle of this Account.
        :rtype: str
        """
        return self._github_handle

    @github_handle.setter
    def github_handle(self, github_handle: str):
        """Sets the github_handle of this Account.


        :param github_handle: The github_handle of this Account.
        :type github_handle: str
        """

        self._github_handle = github_handle

    @property
    def organisation(self) -> str:
        """Gets the organisation of this Account.


        :return: The organisation of this Account.
        :rtype: str
        """
        return self._organisation

    @organisation.setter
    def organisation(self, organisation: str):
        """Sets the organisation of this Account.


        :param organisation: The organisation of this Account.
        :type organisation: str
        """

        self._organisation = organisation

    @property
    def followers_num(self) -> int:
        """Gets the followers_num of this Account.


        :return: The followers_num of this Account.
        :rtype: int
        """
        return self._followers_num

    @followers_num.setter
    def followers_num(self, followers_num: int):
        """Sets the followers_num of this Account.


        :param followers_num: The followers_num of this Account.
        :type followers_num: int
        """
        if followers_num is None:
            raise ValueError("Invalid value for `followers_num`, must not be `None`")  # noqa: E501

        self._followers_num = followers_num

    @property
    def following_num(self) -> int:
        """Gets the following_num of this Account.


        :return: The following_num of this Account.
        :rtype: int
        """
        return self._following_num

    @following_num.setter
    def following_num(self, following_num: int):
        """Sets the following_num of this Account.


        :param following_num: The following_num of this Account.
        :type following_num: int
        """
        if following_num is None:
            raise ValueError("Invalid value for `following_num`, must not be `None`")  # noqa: E501

        self._following_num = following_num

    @property
    def report_num(self) -> int:
        """Gets the report_num of this Account.


        :return: The report_num of this Account.
        :rtype: int
        """
        return self._report_num

    @report_num.setter
    def report_num(self, report_num: int):
        """Sets the report_num of this Account.


        :param report_num: The report_num of this Account.
        :type report_num: int
        """
        if report_num is None:
            raise ValueError("Invalid value for `report_num`, must not be `None`")  # noqa: E501

        self._report_num = report_num

    @property
    def email(self) -> str:
        """Gets the email of this Account.


        :return: The email of this Account.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Account.


        :param email: The email of this Account.
        :type email: str
        """

        self._email = email
