# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.id_account_id import IdAccountId  # noqa: F401,E501
from swagger_server.models.id_comment_id import IdCommentId  # noqa: F401,E501
from swagger_server.models.id_post_id import IdPostId  # noqa: F401,E501
from swagger_server import util


class Comment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: IdCommentId=None, author: IdAccountId=None, time: datetime=None, content: str=None, comment_list: List[IdCommentId]=None, posts: List[IdPostId]=None, upvote_num: int=None, report_num: int=None):  # noqa: E501
        """Comment - a model defined in Swagger

        :param id: The id of this Comment.  # noqa: E501
        :type id: IdCommentId
        :param author: The author of this Comment.  # noqa: E501
        :type author: IdAccountId
        :param time: The time of this Comment.  # noqa: E501
        :type time: datetime
        :param content: The content of this Comment.  # noqa: E501
        :type content: str
        :param comment_list: The comment_list of this Comment.  # noqa: E501
        :type comment_list: List[IdCommentId]
        :param posts: The posts of this Comment.  # noqa: E501
        :type posts: List[IdPostId]
        :param upvote_num: The upvote_num of this Comment.  # noqa: E501
        :type upvote_num: int
        :param report_num: The report_num of this Comment.  # noqa: E501
        :type report_num: int
        """
        self.swagger_types = {
            'id': IdCommentId,
            'author': IdAccountId,
            'time': datetime,
            'content': str,
            'comment_list': List[IdCommentId],
            'posts': List[IdPostId],
            'upvote_num': int,
            'report_num': int
        }

        self.attribute_map = {
            'id': 'Id',
            'author': 'Author',
            'time': 'Time',
            'content': 'Content',
            'comment_list': 'Comment_list',
            'posts': 'Posts',
            'upvote_num': 'Upvote_num',
            'report_num': 'Report_num'
        }
        self._id = id
        self._author = author
        self._time = time
        self._content = content
        self._comment_list = comment_list
        self._posts = posts
        self._upvote_num = upvote_num
        self._report_num = report_num

    @classmethod
    def from_dict(cls, dikt) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Comment of this Comment.  # noqa: E501
        :rtype: Comment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> IdCommentId:
        """Gets the id of this Comment.


        :return: The id of this Comment.
        :rtype: IdCommentId
        """
        return self._id

    @id.setter
    def id(self, id: IdCommentId):
        """Sets the id of this Comment.


        :param id: The id of this Comment.
        :type id: IdCommentId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def author(self) -> IdAccountId:
        """Gets the author of this Comment.


        :return: The author of this Comment.
        :rtype: IdAccountId
        """
        return self._author

    @author.setter
    def author(self, author: IdAccountId):
        """Sets the author of this Comment.


        :param author: The author of this Comment.
        :type author: IdAccountId
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def time(self) -> datetime:
        """Gets the time of this Comment.


        :return: The time of this Comment.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time: datetime):
        """Sets the time of this Comment.


        :param time: The time of this Comment.
        :type time: datetime
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def content(self) -> str:
        """Gets the content of this Comment.


        :return: The content of this Comment.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this Comment.


        :param content: The content of this Comment.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def comment_list(self) -> List[IdCommentId]:
        """Gets the comment_list of this Comment.


        :return: The comment_list of this Comment.
        :rtype: List[IdCommentId]
        """
        return self._comment_list

    @comment_list.setter
    def comment_list(self, comment_list: List[IdCommentId]):
        """Sets the comment_list of this Comment.


        :param comment_list: The comment_list of this Comment.
        :type comment_list: List[IdCommentId]
        """

        self._comment_list = comment_list

    @property
    def posts(self) -> List[IdPostId]:
        """Gets the posts of this Comment.


        :return: The posts of this Comment.
        :rtype: List[IdPostId]
        """
        return self._posts

    @posts.setter
    def posts(self, posts: List[IdPostId]):
        """Sets the posts of this Comment.


        :param posts: The posts of this Comment.
        :type posts: List[IdPostId]
        """

        self._posts = posts

    @property
    def upvote_num(self) -> int:
        """Gets the upvote_num of this Comment.


        :return: The upvote_num of this Comment.
        :rtype: int
        """
        return self._upvote_num

    @upvote_num.setter
    def upvote_num(self, upvote_num: int):
        """Sets the upvote_num of this Comment.


        :param upvote_num: The upvote_num of this Comment.
        :type upvote_num: int
        """
        if upvote_num is None:
            raise ValueError("Invalid value for `upvote_num`, must not be `None`")  # noqa: E501

        self._upvote_num = upvote_num

    @property
    def report_num(self) -> int:
        """Gets the report_num of this Comment.


        :return: The report_num of this Comment.
        :rtype: int
        """
        return self._report_num

    @report_num.setter
    def report_num(self, report_num: int):
        """Sets the report_num of this Comment.


        :param report_num: The report_num of this Comment.
        :type report_num: int
        """
        if report_num is None:
            raise ValueError("Invalid value for `report_num`, must not be `None`")  # noqa: E501

        self._report_num = report_num
