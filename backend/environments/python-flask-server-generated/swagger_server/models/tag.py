# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.id_account_id import IdAccountId  # noqa: F401,E501
from swagger_server.models.id_post_id import IdPostId  # noqa: F401,E501
from swagger_server.models.id_tag_id import IdTagId  # noqa: F401,E501
from swagger_server import util


class Tag(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: IdTagId=None, tag_name: str=None, posts: List[IdPostId]=None, members: List[IdAccountId]=None):  # noqa: E501
        """Tag - a model defined in Swagger

        :param id: The id of this Tag.  # noqa: E501
        :type id: IdTagId
        :param tag_name: The tag_name of this Tag.  # noqa: E501
        :type tag_name: str
        :param posts: The posts of this Tag.  # noqa: E501
        :type posts: List[IdPostId]
        :param members: The members of this Tag.  # noqa: E501
        :type members: List[IdAccountId]
        """
        self.swagger_types = {
            'id': IdTagId,
            'tag_name': str,
            'posts': List[IdPostId],
            'members': List[IdAccountId]
        }

        self.attribute_map = {
            'id': 'Id',
            'tag_name': 'Tag_name',
            'posts': 'Posts',
            'members': 'Members'
        }
        self._id = id
        self._tag_name = tag_name
        self._posts = posts
        self._members = members

    @classmethod
    def from_dict(cls, dikt) -> 'Tag':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Tag of this Tag.  # noqa: E501
        :rtype: Tag
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> IdTagId:
        """Gets the id of this Tag.


        :return: The id of this Tag.
        :rtype: IdTagId
        """
        return self._id

    @id.setter
    def id(self, id: IdTagId):
        """Sets the id of this Tag.


        :param id: The id of this Tag.
        :type id: IdTagId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def tag_name(self) -> str:
        """Gets the tag_name of this Tag.


        :return: The tag_name of this Tag.
        :rtype: str
        """
        return self._tag_name

    @tag_name.setter
    def tag_name(self, tag_name: str):
        """Sets the tag_name of this Tag.


        :param tag_name: The tag_name of this Tag.
        :type tag_name: str
        """
        if tag_name is None:
            raise ValueError("Invalid value for `tag_name`, must not be `None`")  # noqa: E501

        self._tag_name = tag_name

    @property
    def posts(self) -> List[IdPostId]:
        """Gets the posts of this Tag.


        :return: The posts of this Tag.
        :rtype: List[IdPostId]
        """
        return self._posts

    @posts.setter
    def posts(self, posts: List[IdPostId]):
        """Sets the posts of this Tag.


        :param posts: The posts of this Tag.
        :type posts: List[IdPostId]
        """
        if posts is None:
            raise ValueError("Invalid value for `posts`, must not be `None`")  # noqa: E501

        self._posts = posts

    @property
    def members(self) -> List[IdAccountId]:
        """Gets the members of this Tag.


        :return: The members of this Tag.
        :rtype: List[IdAccountId]
        """
        return self._members

    @members.setter
    def members(self, members: List[IdAccountId]):
        """Sets the members of this Tag.


        :param members: The members of this Tag.
        :type members: List[IdAccountId]
        """

        self._members = members
