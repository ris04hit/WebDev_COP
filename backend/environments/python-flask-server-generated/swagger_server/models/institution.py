# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.id_account_id import IdAccountId  # noqa: F401,E501
from swagger_server.models.id_institution_id import IdInstitutionId  # noqa: F401,E501
from swagger_server.models.id_post_id import IdPostId  # noqa: F401,E501
from swagger_server import util


class Institution(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: IdInstitutionId=None, name: str=None, members: List[IdAccountId]=None, creation_time: datetime=None, posts: List[IdPostId]=None, description: str=None, domains: List[str]=None, admin: IdAccountId=None, email: str=None):  # noqa: E501
        """Institution - a model defined in Swagger

        :param id: The id of this Institution.  # noqa: E501
        :type id: IdInstitutionId
        :param name: The name of this Institution.  # noqa: E501
        :type name: str
        :param members: The members of this Institution.  # noqa: E501
        :type members: List[IdAccountId]
        :param creation_time: The creation_time of this Institution.  # noqa: E501
        :type creation_time: datetime
        :param posts: The posts of this Institution.  # noqa: E501
        :type posts: List[IdPostId]
        :param description: The description of this Institution.  # noqa: E501
        :type description: str
        :param domains: The domains of this Institution.  # noqa: E501
        :type domains: List[str]
        :param admin: The admin of this Institution.  # noqa: E501
        :type admin: IdAccountId
        :param email: The email of this Institution.  # noqa: E501
        :type email: str
        """
        self.swagger_types = {
            'id': IdInstitutionId,
            'name': str,
            'members': List[IdAccountId],
            'creation_time': datetime,
            'posts': List[IdPostId],
            'description': str,
            'domains': List[str],
            'admin': IdAccountId,
            'email': str
        }

        self.attribute_map = {
            'id': 'Id',
            'name': 'Name',
            'members': 'Members',
            'creation_time': 'Creation_time',
            'posts': 'Posts',
            'description': 'Description',
            'domains': 'Domains',
            'admin': 'Admin',
            'email': 'Email'
        }
        self._id = id
        self._name = name
        self._members = members
        self._creation_time = creation_time
        self._posts = posts
        self._description = description
        self._domains = domains
        self._admin = admin
        self._email = email

    @classmethod
    def from_dict(cls, dikt) -> 'Institution':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Institution of this Institution.  # noqa: E501
        :rtype: Institution
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> IdInstitutionId:
        """Gets the id of this Institution.


        :return: The id of this Institution.
        :rtype: IdInstitutionId
        """
        return self._id

    @id.setter
    def id(self, id: IdInstitutionId):
        """Sets the id of this Institution.


        :param id: The id of this Institution.
        :type id: IdInstitutionId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Institution.


        :return: The name of this Institution.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Institution.


        :param name: The name of this Institution.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def members(self) -> List[IdAccountId]:
        """Gets the members of this Institution.


        :return: The members of this Institution.
        :rtype: List[IdAccountId]
        """
        return self._members

    @members.setter
    def members(self, members: List[IdAccountId]):
        """Sets the members of this Institution.


        :param members: The members of this Institution.
        :type members: List[IdAccountId]
        """
        if members is None:
            raise ValueError("Invalid value for `members`, must not be `None`")  # noqa: E501

        self._members = members

    @property
    def creation_time(self) -> datetime:
        """Gets the creation_time of this Institution.


        :return: The creation_time of this Institution.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time: datetime):
        """Sets the creation_time of this Institution.


        :param creation_time: The creation_time of this Institution.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")  # noqa: E501

        self._creation_time = creation_time

    @property
    def posts(self) -> List[IdPostId]:
        """Gets the posts of this Institution.


        :return: The posts of this Institution.
        :rtype: List[IdPostId]
        """
        return self._posts

    @posts.setter
    def posts(self, posts: List[IdPostId]):
        """Sets the posts of this Institution.


        :param posts: The posts of this Institution.
        :type posts: List[IdPostId]
        """

        self._posts = posts

    @property
    def description(self) -> str:
        """Gets the description of this Institution.


        :return: The description of this Institution.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Institution.


        :param description: The description of this Institution.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def domains(self) -> List[str]:
        """Gets the domains of this Institution.


        :return: The domains of this Institution.
        :rtype: List[str]
        """
        return self._domains

    @domains.setter
    def domains(self, domains: List[str]):
        """Sets the domains of this Institution.


        :param domains: The domains of this Institution.
        :type domains: List[str]
        """

        self._domains = domains

    @property
    def admin(self) -> IdAccountId:
        """Gets the admin of this Institution.


        :return: The admin of this Institution.
        :rtype: IdAccountId
        """
        return self._admin

    @admin.setter
    def admin(self, admin: IdAccountId):
        """Sets the admin of this Institution.


        :param admin: The admin of this Institution.
        :type admin: IdAccountId
        """
        if admin is None:
            raise ValueError("Invalid value for `admin`, must not be `None`")  # noqa: E501

        self._admin = admin

    @property
    def email(self) -> str:
        """Gets the email of this Institution.


        :return: The email of this Institution.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Institution.


        :param email: The email of this Institution.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email
