openapi: 3.0.3
info:
  title: Synergy API
  description: "A collaborative space for people who want to share their knowledge\
    \ and resource. Whether need to share in an organization or publically to all\
    \ or only to friends, Synergy is here. Anybody with need of getting some resources,\
    \ just search it and surely somebody will be there who has posted the related\
    \ content for you. This is a swagger documentation which provides API for Synergy\
    \ website."
  contact:
    email: cs1210547@iitd.ac.in
  version: "1.0"
servers:
- url: /
security:
- app_id: []
tags:
- name: Post
  description: Everything about your Posts
- name: Account
  description: Everything about Accounts
- name: Tag
  description: Everything about Tags
- name: Institution
  description: Everything about your Institution
- name: Comment
  description: Everything about your Comments
paths:
  /Post:
    put:
      tags:
      - Post
      summary: Update an existing Post
      description: Update an existing Post by Id
      operationId: update_post
      requestBody:
        description: Update an existent Post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        "400":
          description: Invalid ID supplied
        "404":
          description: Post not found
        "405":
          description: Validation exception
      x-openapi-router-controller: swagger_server.controllers.post_controller
    post:
      tags:
      - Post
      summary: Add a new Post to the database
      description: Add a new Post to the database
      operationId: add_post
      requestBody:
        description: Create a new Post in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        "405":
          description: Invalid input
      x-openapi-router-controller: swagger_server.controllers.post_controller
    delete:
      tags:
      - Post
      summary: Deletes Post from the database
      description: Deletes Post from the database
      operationId: delete_post
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Post not found
      x-openapi-router-controller: swagger_server.controllers.post_controller
  /Post/{Id}:
    get:
      tags:
      - Post
      summary: Find Post by ID
      description: For valid response use only the ID structure
      operationId: get_post_by_id
      parameters:
      - name: Id
        in: path
        description: Id of Post that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Id.Post_Id'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        "400":
          description: Invalid ID supplied
        "404":
          description: Account not found
      x-openapi-router-controller: swagger_server.controllers.post_controller
  /Account:
    put:
      tags:
      - Account
      summary: Update an existing Account
      description: Update an existing Account by Id
      operationId: update_account
      requestBody:
        description: Update an existent Account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          description: Invalid ID supplied
        "404":
          description: Account not found
        "405":
          description: Validation exception
      x-openapi-router-controller: swagger_server.controllers.account_controller
    post:
      tags:
      - Account
      summary: Add a new Account to the database
      description: Add a new Account to the database
      operationId: add_account
      requestBody:
        description: Create a new Account in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "405":
          description: Invalid input
      x-openapi-router-controller: swagger_server.controllers.account_controller
    delete:
      tags:
      - Account
      summary: Deletes Account from the database
      description: Deletes Account from the database
      operationId: delete_account
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Account not found
      x-openapi-router-controller: swagger_server.controllers.account_controller
  /Account/{Username}:
    get:
      tags:
      - Account
      summary: Find Account by Username
      description: Find Account by Username
      operationId: get_account_by_name
      parameters:
      - name: Username
        in: path
        description: Username of Account that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          description: Invalid ID supplied
        "404":
          description: Account not found
      x-openapi-router-controller: swagger_server.controllers.account_controller
  /Account/{Id}:
    get:
      tags:
      - Account
      summary: Find Account by ID
      description: For valid response use only the ID structure
      operationId: get_account_by_id
      parameters:
      - name: Id
        in: path
        description: Id of Account that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Account'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          description: Invalid ID supplied
        "404":
          description: Account not found
      x-openapi-router-controller: swagger_server.controllers.account_controller
  /Account/login:
    get:
      tags:
      - Account
      summary: Logs Account into the system
      description: ""
      operationId: login_account
      parameters:
      - name: Username
        in: query
        description: The user name for login
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: Password
        in: query
        description: The password for login in clear text
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "400":
          description: Invalid username/password supplied
      x-openapi-router-controller: swagger_server.controllers.account_controller
  /Account/logout:
    get:
      tags:
      - Account
      summary: Logs out current logged in Account session
      description: ""
      operationId: logout_account
      parameters: []
      responses:
        default:
          description: successful operation
      x-openapi-router-controller: swagger_server.controllers.account_controller
  /Institution:
    put:
      tags:
      - Institution
      summary: Update an existing Institution
      description: Update an existing Institution by Id
      operationId: update_institution
      requestBody:
        description: Update an existent Institution
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Institution'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
        "400":
          description: Invalid ID supplied
        "404":
          description: Institution not found
        "405":
          description: Validation exception
      x-openapi-router-controller: swagger_server.controllers.institution_controller
    post:
      tags:
      - Institution
      summary: Add a new Institution to the database
      description: Add a new Institution to the database
      operationId: add_institution
      requestBody:
        description: Create a new Institution in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Institution'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
        "405":
          description: Invalid input
      x-openapi-router-controller: swagger_server.controllers.institution_controller
  /Institution/{Id}:
    get:
      tags:
      - Institution
      summary: Find Institution by ID
      description: For valid response use only the ID structure
      operationId: get_institution_by_id
      parameters:
      - name: Id
        in: path
        description: Id of Institution that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Id.Institution_Id'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          description: Invalid ID supplied
        "404":
          description: Account not found
      x-openapi-router-controller: swagger_server.controllers.institution_controller
  /Institution/{Name}:
    get:
      tags:
      - Institution
      summary: Find Institution by Name
      description: Find Institution by Name
      operationId: get_institution_by_name
      parameters:
      - name: Name
        in: path
        description: Name of Institution that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
        "400":
          description: Invalid ID supplied
        "404":
          description: Institution not found
      x-openapi-router-controller: swagger_server.controllers.institution_controller
  /Tag:
    put:
      tags:
      - Tag
      summary: Update an existing Tag
      description: Update an existing Tag by Id
      operationId: update_tag
      requestBody:
        description: Update an existent Tag
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        "400":
          description: Invalid ID supplied
        "404":
          description: Tag not found
        "405":
          description: Validation exception
      x-openapi-router-controller: swagger_server.controllers.tag_controller
    post:
      tags:
      - Tag
      summary: Add a new Tag to the database
      description: Add a new Tag to the database
      operationId: add_tag
      requestBody:
        description: Create a new Tag in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        "405":
          description: Invalid input
      x-openapi-router-controller: swagger_server.controllers.tag_controller
  /Tag/{Id}:
    get:
      tags:
      - Tag
      summary: Find Tag by ID
      description: For valid response use only the ID structure
      operationId: get_tag_by_id
      parameters:
      - name: Id
        in: path
        description: Id of Tag that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Id.Tag_Id'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          description: Invalid ID supplied
        "404":
          description: Account not found
      x-openapi-router-controller: swagger_server.controllers.tag_controller
  /Tag/{Name}:
    get:
      tags:
      - Tag
      summary: Find Tag by Name
      description: Find Tag by Name
      operationId: get_tag_by_name
      parameters:
      - name: Name
        in: path
        description: Name of Tag that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        "400":
          description: Invalid ID supplied
        "404":
          description: Tag not found
      x-openapi-router-controller: swagger_server.controllers.tag_controller
  /Comment:
    put:
      tags:
      - Comment
      summary: Update an existing Comment
      description: Update an existing Comment by Id
      operationId: update_comment
      requestBody:
        description: Update an existent Comment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        "400":
          description: Invalid ID supplied
        "404":
          description: Comment not found
        "405":
          description: Validation exception
      x-openapi-router-controller: swagger_server.controllers.comment_controller
    post:
      tags:
      - Comment
      summary: Add a new Comment to the database
      description: Add a new Comment to the database
      operationId: add_comment
      requestBody:
        description: Create a new Comment in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        "405":
          description: Invalid input
      x-openapi-router-controller: swagger_server.controllers.comment_controller
    delete:
      tags:
      - Comment
      summary: Deletes Comment from the database
      description: Deletes Comment from the database
      operationId: delete_comment
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Comment not found
      x-openapi-router-controller: swagger_server.controllers.comment_controller
  /Comment/{Id}:
    get:
      tags:
      - Comment
      summary: Find Comment by ID
      description: For valid response use only the ID structure
      operationId: get_comment_by_id
      parameters:
      - name: Id
        in: path
        description: Id of Comment that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Id.Comment_Id'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          description: Invalid ID supplied
        "404":
          description: Account not found
      x-openapi-router-controller: swagger_server.controllers.comment_controller
components:
  schemas:
    Post:
      required:
      - Author
      - Content
      - Id
      - Public_post
      - Report_num
      - Time
      - Title
      - Upvote_num
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/Id.Post_Id'
        Author:
          $ref: '#/components/schemas/Id.Account_Id'
        Time:
          type: string
          format: date-time
        Title:
          type: string
        Content:
          type: string
        Comment:
          type: array
          items:
            $ref: '#/components/schemas/Id.Comment_Id'
        Public_post:
          type: boolean
        Institutes:
          type: array
          items:
            $ref: '#/components/schemas/Id.Institution_Id'
        tag_list:
          type: array
          items:
            $ref: '#/components/schemas/Id.Tag_Id'
        Report_num:
          type: integer
        Upvote_num:
          type: integer
      example:
        Comment:
        - obj: C
          uniq: uniq
        - obj: C
          uniq: uniq
        Public_post: true
        Upvote_num: 6
        Content: Content
        tag_list:
        - obj: T
          uniq: uniq
        - obj: T
          uniq: uniq
        Institutes:
        - obj: I
          uniq: uniq
        - obj: I
          uniq: uniq
        Author:
          obj: A
          uniq: uniq
        Title: Title
        Time: 2000-01-23T04:56:07.000+00:00
        Id:
          obj: P
          uniq: uniq
        Report_num: 0
    Account:
      required:
      - Creation_time
      - Followers_num
      - Following_num
      - Id
      - Last_visit
      - Name
      - Report_num
      - Upvotes
      - Username
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/Id.Account_Id'
        Username:
          type: string
        Creation_time:
          type: string
          format: date-time
        Name:
          type: string
        Institutes:
          type: array
          items:
            $ref: '#/components/schemas/Id.Institution_Id'
        Posts:
          type: array
          items:
            $ref: '#/components/schemas/Id.Post_Id'
        Last_visit:
          type: string
          format: date-time
        Upvotes:
          type: integer
        Profile_photo:
          type: string
        Bookmarks:
          type: array
          items:
            $ref: '#/components/schemas/Id.Post_Id'
        Comments:
          type: array
          items:
            $ref: '#/components/schemas/Id.Comment_Id'
        tag_list:
          type: array
          items:
            $ref: '#/components/schemas/Id.Tag_Id'
        Country:
          type: string
        Website_address:
          type: string
        Github_handle:
          type: string
        Organisation:
          type: string
        Followers_num:
          type: integer
        Following_num:
          type: integer
        Report_num:
          type: integer
        Email:
          type: string
      example:
        Last_visit: 2000-01-23T04:56:07.000+00:00
        Creation_time: 2000-01-23T04:56:07.000+00:00
        Bookmarks:
        - null
        - null
        Email: Email
        Organisation: Organisation
        Comments:
        - obj: C
          uniq: uniq
        - obj: C
          uniq: uniq
        Institutes:
        - obj: I
          uniq: uniq
        - obj: I
          uniq: uniq
        Posts:
        - obj: P
          uniq: uniq
        - obj: P
          uniq: uniq
        Profile_photo: Profile_photo
        Upvotes: 0
        Report_num: 5
        Name: Name
        Github_handle: Github_handle
        Website_address: Website_address
        Followers_num: 6
        Username: Username
        tag_list:
        - obj: T
          uniq: uniq
        - obj: T
          uniq: uniq
        Country: Country
        Id:
          obj: A
          uniq: uniq
        Following_num: 1
    Institution:
      required:
      - Admin
      - Creation_time
      - Description
      - Email
      - Id
      - Members
      - Name
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/Id.Institution_Id'
        Name:
          type: string
        Members:
          type: array
          items:
            $ref: '#/components/schemas/Id.Account_Id'
        Creation_time:
          type: string
          format: date-time
        Posts:
          type: array
          items:
            $ref: '#/components/schemas/Id.Post_Id'
        Description:
          type: string
        Domains:
          type: array
          items:
            type: string
        Admin:
          $ref: '#/components/schemas/Id.Account_Id'
        Email:
          type: string
      example:
        Domains:
        - Domains
        - Domains
        Creation_time: 2000-01-23T04:56:07.000+00:00
        Description: Description
        Email: Email
        Posts:
        - obj: P
          uniq: uniq
        - obj: P
          uniq: uniq
        Id:
          obj: I
          uniq: uniq
        Admin: null
        Members:
        - obj: A
          uniq: uniq
        - obj: A
          uniq: uniq
        Name: Name
    Tag:
      required:
      - Id
      - Posts
      - Tag_name
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/Id.Tag_Id'
        Tag_name:
          type: string
        Posts:
          type: array
          items:
            $ref: '#/components/schemas/Id.Post_Id'
        Members:
          type: array
          items:
            $ref: '#/components/schemas/Id.Account_Id'
      example:
        Tag_name: Tag_name
        Posts:
        - obj: P
          uniq: uniq
        - obj: P
          uniq: uniq
        Id:
          obj: T
          uniq: uniq
        Members:
        - obj: A
          uniq: uniq
        - obj: A
          uniq: uniq
    Comment:
      required:
      - Author
      - Content
      - Id
      - Post
      - Report_num
      - Time
      - Upvote_num
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/Id.Comment_Id'
        Author:
          $ref: '#/components/schemas/Id.Account_Id'
        Time:
          type: string
          format: date-time
        Content:
          type: string
        Comment_list:
          type: array
          items:
            $ref: '#/components/schemas/Id.Comment_Id'
        Posts:
          type: array
          items:
            $ref: '#/components/schemas/Id.Post_Id'
        Upvote_num:
          type: integer
        Report_num:
          type: integer
      example:
        Upvote_num: 0
        Content: Content
        Posts:
        - obj: P
          uniq: uniq
        - obj: P
          uniq: uniq
        Author:
          obj: A
          uniq: uniq
        Time: 2000-01-23T04:56:07.000+00:00
        Id:
          obj: C
          uniq: uniq
        Comment_list:
        - null
        - null
        Report_num: 6
    Id:
      required:
      - obj
      - uniq
      type: object
      properties:
        obj:
          type: string
          enum:
          - A
          - I
          - T
          - C
          - P
        uniq:
          type: string
    Id.Account_Id:
      required:
      - obj
      - uniq
      type: object
      properties:
        obj:
          type: string
          enum:
          - A
        uniq:
          type: string
      example:
        obj: A
        uniq: uniq
    Id.Institution_Id:
      required:
      - obj
      - uniq
      type: object
      properties:
        obj:
          type: string
          enum:
          - I
        uniq:
          type: string
      example:
        obj: I
        uniq: uniq
    Id.Tag_Id:
      required:
      - obj
      - uniq
      type: object
      properties:
        obj:
          type: string
          enum:
          - T
        uniq:
          type: string
      example:
        obj: T
        uniq: uniq
    Id.Comment_Id:
      required:
      - obj
      - uniq
      type: object
      properties:
        obj:
          type: string
          enum:
          - C
        uniq:
          type: string
      example:
        obj: C
        uniq: uniq
    Id.Post_Id:
      required:
      - obj
      - uniq
      type: object
      properties:
        obj:
          type: string
          enum:
          - P
        uniq:
          type: string
      example:
        obj: P
        uniq: uniq
  securitySchemes:
    app_id:
      type: apiKey
      description: API key to authorize requests
      name: appid
      in: query
      x-apikeyInfoFunc: swagger_server.controllers.authorization_controller.check_app_id

