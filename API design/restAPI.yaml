openapi: 3.0.3
info:
  title: Synergy API
  description: |-
    A collaborative space for people who want to share their knowledge and resource. Whether need to share in an organization or publically to all or only to friends, Synergy is here. Anybody with need of getting some resources, just search it and surely somebody will be there who has posted the related content for you. This is a swagger documentation which provides API for Synergy website.
  # termsOfService: http://swagger.io/terms/
  contact:
    email: cs1210547@iitd.ac.in
  # license:
  #   name: Apache 2.0
  #   url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0"
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
# servers:
#   - url: https://petstore3.swagger.io/api/v3
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /Post:
    put:
      tags:
        - Post
      summary: Update an existing Post
      description: Update an existing Post by Id
      operationId: updatePost
      requestBody:
        description: Update an existent Post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Post not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - Post
      summary: Add a new Post to the database
      description: Add a new Post to the database
      operationId: addPost
      requestBody:
        description: Create a new Post in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'          
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - Post
      summary: Deletes Post from the database
      description: Deletes Post from the database
      operationId: deletePost
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Post not found
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /Post/{Id}:
    get:
      tags:
        - Post
      summary: Find Post by ID
      description: For valid response use only the ID structure
      operationId: getPostById
      parameters:
        - name: Id
          in: path
          description: Id of Post that needs to be fetched
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Account not found
  /Account:
    put:
      tags:
        - Account
      summary: Update an existing Account
      description: Update an existing Account by Id
      operationId: updateAccount
      requestBody:
        description: Update an existent Account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Account not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - Account
      summary: Add a new Account to the database
      description: Add a new Account to the database
      operationId: addAccount
      requestBody:
        description: Create a new Account in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'          
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - Account
      summary: Deletes Account from the database
      description: Deletes Account from the database
      operationId: deleteAccount
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Account not found
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /Account/{Username}:
    get:
      tags:
        - Account
      summary: Find Account by Username
      description: Find Account by Username
      operationId: getAccountByName
      parameters:
        - name: Username
          in: path
          description: Username of Account that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Account not found
  /Account/{Id}:
    get:
      tags:
        - Account
      summary: Find Account by ID
      description: For valid response use only the ID structure
      operationId: getAccountById
      parameters:
        - name: Id
          in: path
          description: Id of Account that needs to be fetched
          required: true
          schema:
            $ref: '#/components/schemas/Account'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Account not found
  /Account/login:
    get:
      tags:
        - Account
      summary: Logs Account into the system
      description: ''
      operationId: loginAccount
      parameters:
        - name: Username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: Password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /Account/logout:
    get:
      tags:
        - Account
      summary: Logs out current logged in Account session
      description: ''
      operationId: logoutAccount
      parameters: []
      responses:
        default:
          description: successful operation
  /Institution:
    put:
      tags:
        - Institution
      summary: Update an existing Institution
      description: Update an existing Institution by Id
      operationId: updateInstitution
      requestBody:
        description: Update an existent Institution
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Institution'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Institution not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - Institution
      summary: Add a new Institution to the database
      description: Add a new Institution to the database
      operationId: addInstitution
      requestBody:
        description: Create a new Institution in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Institution'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'          
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /Institution/{Id}:
    get:
      tags:
        - Institution
      summary: Find Institution by ID
      description: For valid response use only the ID structure
      operationId: getInstitutionById
      parameters:
        - name: Id
          in: path
          description: Id of Institution that needs to be fetched
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Account not found
  /Tag:
    put:
      tags:
        - Tag
      summary: Update an existing Tag
      description: Update an existing Tag by Id
      operationId: updateTag
      requestBody:
        description: Update an existent Tag
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Tag not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - Tag
      summary: Add a new Tag to the database
      description: Add a new Tag to the database
      operationId: addTag
      requestBody:
        description: Create a new Tag in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'          
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /Tag/{Id}:
    get:
      tags:
        - Tag
      summary: Find Tag by ID
      description: For valid response use only the ID structure
      operationId: getTagById
      parameters:
        - name: Id
          in: path
          description: Id of Tag that needs to be fetched
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Account not found
  /Comment:
    put:
      tags:
        - Comment
      summary: Update an existing Comment
      description: Update an existing Comment by Id
      operationId: updateComment
      requestBody:
        description: Update an existent Comment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Comment not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - Comment
      summary: Add a new Comment to the database
      description: Add a new Comment to the database
      operationId: addComment
      requestBody:
        description: Create a new Comment in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'          
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - Comment
      summary: Deletes Comment from the database
      description: Deletes Comment from the database
      operationId: deleteComment
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Comment not found
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /Comment/{Id}:
    get:
      tags:
        - Comment
      summary: Find Comment by ID
      description: For valid response use only the ID structure
      operationId: getCommentById
      parameters:
        - name: Id
          in: path
          description: Id of Comment that needs to be fetched
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Account not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header